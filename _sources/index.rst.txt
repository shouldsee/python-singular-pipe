.. singular_pipe documentation master file, created by
   sphinx-quickstart on Mon Mar  9 23:15:33 2020.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.
.. check https://docs.python.org/2/_sources/

********************************************************************
Welcome to :mod:`singular_pipe`-|version| 's documentation!
********************************************************************

.. _Contents

.. toctree::
   :maxdepth: 2
   :numbered:
   
   install/index.rst
   example_usage.rst
   lib/index.rst
   indexes.rst
   license.rst

Overview
===================

Despite plenty of packages out there, writing reproducible python
scripts is not yet a simple task. :obj:`singular_pipe` is written to address
serveral aspects:
  * Workflow execution as a file synchronisation process.
  * Separation of code from data.
  * Declaring function-level dependency.

Workflow execution as file synchronisation
-------------------------------------------

Any workflow can be divided into two parts: code and data. Given 
a data state, one can apply some code to check whether these data
are outdated. Executing any workflow can be abstracted to a chain of 
sequential changes to local/remote files from upstream to downstream.
If all files are up-to-date as checked by the code, then nothing needs
to be updated. 

To write such codes, file states must be explicitly monitored and remembered.
In :mod:`singular_pipe` this is achieved through a set of custom eval-like function
called :obj:`Runner` and functions with a specialised signature called :obj:`Node`
or :obj:`Flow`. :obj:`Runner` would 
extract file dependency graph from the function signatures and use this information
to make runtime decisions as to whether to skip a function evaluation.

::
  from singular_pipe.types import Node, Flow
  from singular_pipe.runner import cache_run, get_changed_files

  






:Author: Feng Geng
:Email: shouldsee.gem@gmail.com

